deque(['$', 'START'])
START --> ['PROG']
deque(['$', 'PROG'])
PROG --> ['REPTPROG0']
deque(['$', 'REPTPROG0'])
REPTPROG0 --> ['STRUCTORIMPLORFUNC', 'REPTPROG0']
deque(['$', 'REPTPROG0', 'STRUCTORIMPLORFUNC'])
STRUCTORIMPLORFUNC --> ['FUNCDEF']
deque(['$', 'REPTPROG0', 'FUNCDEF'])
FUNCDEF --> ['FUNCHEAD', 'FUNCBODY']
deque(['$', 'REPTPROG0', 'FUNCBODY', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', 'lpar', 'FPARAMS', 'rpar', 'arrow', 'RETURNTYPE']
deque(['$', 'REPTPROG0', 'FUNCBODY', 'RETURNTYPE', 'arrow', 'rpar', 'FPARAMS', 'lpar', 'id', 'func'])
func --> func
func
deque(['$', 'REPTPROG0', 'FUNCBODY', 'RETURNTYPE', 'arrow', 'rpar', 'FPARAMS', 'lpar', 'id'])
id --> id
func main
deque(['$', 'REPTPROG0', 'FUNCBODY', 'RETURNTYPE', 'arrow', 'rpar', 'FPARAMS', 'lpar'])
lpar --> lpar
func main(
deque(['$', 'REPTPROG0', 'FUNCBODY', 'RETURNTYPE', 'arrow', 'rpar', 'FPARAMS'])
FPARAMS --> ['epsilon']
deque(['$', 'REPTPROG0', 'FUNCBODY', 'RETURNTYPE', 'arrow', 'rpar', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'FUNCBODY', 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar
func main()
deque(['$', 'REPTPROG0', 'FUNCBODY', 'RETURNTYPE', 'arrow'])
arrow --> arrow
func main() ->
deque(['$', 'REPTPROG0', 'FUNCBODY', 'RETURNTYPE'])
RETURNTYPE --> ['void']
deque(['$', 'REPTPROG0', 'FUNCBODY', 'void'])
void --> void
func main() -> void
deque(['$', 'REPTPROG0', 'FUNCBODY'])
FUNCBODY --> ['lcurbr', 'REPTFUNCBODY1', 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'lcurbr'])
lcurbr --> lcurbr
func main() -> void
{
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', 'colon', 'TYPE', 'REPTVARDECL4', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE', 'colon', 'id', 'let'])
let --> let
func main() -> void
{
  let
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE', 'colon', 'id'])
id --> id
func main() -> void
{
  let f1
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE', 'colon'])
colon --> colon
func main() -> void
{
  let f1:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE'])
TYPE --> ['id']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'id'])
id --> id
func main() -> void
{
  let f1: linear
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi'])
semi --> semi
func main() -> void
{
  let f1: linear;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', 'colon', 'TYPE', 'REPTVARDECL4', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE', 'colon', 'id', 'let'])
let --> let
func main() -> void
{
  let f1: linear;
  let
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE', 'colon', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE', 'colon'])
colon --> colon
func main() -> void
{
  let f1: linear;
  let f2:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE'])
TYPE --> ['id']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi'])
semi --> semi
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', 'colon', 'TYPE', 'REPTVARDECL4', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE', 'colon', 'id', 'let'])
let --> let
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE', 'colon', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE', 'colon'])
colon --> colon
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'TYPE'])
TYPE --> ['integer']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4', 'integer'])
integer --> integer
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi'])
semi --> semi
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'EXPR', 'equal'])
equal --> equal
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['IDNEST', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'IDNEST'])
IDNEST --> ['dot', 'id', 'VARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id', 'dot'])
dot --> dot
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['lpar', 'APARAMS', 'rpar']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'APARAMS', 'lpar'])
lpar --> lpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'APARAMS'])
APARAMS --> ['EXPR', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'intlit'])
intlit --> intlit
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['APARAMSTAIL', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'APARAMSTAIL'])
APARAMSTAIL --> ['comma', 'EXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'EXPR', 'comma'])
comma --> comma
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2,
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'floatlit'])
floatlit --> floatlit
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar'])
rpar --> rpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi'])
semi --> semi
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'EXPR', 'equal'])
equal --> equal
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['IDNEST', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'IDNEST'])
IDNEST --> ['dot', 'id', 'VARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id', 'dot'])
dot --> dot
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['lpar', 'APARAMS', 'rpar']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'APARAMS', 'lpar'])
lpar --> lpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'APARAMS'])
APARAMS --> ['EXPR', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['SIGN', 'FACTOR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR', 'SIGN'])
SIGN --> ['minus']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR', 'minus'])
minus --> minus
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'floatlit'])
floatlit --> floatlit
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['APARAMSTAIL', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'APARAMSTAIL'])
APARAMSTAIL --> ['comma', 'EXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'EXPR', 'comma'])
comma --> comma
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0,
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'floatlit'])
floatlit --> floatlit
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['APARAMSTAIL', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'APARAMSTAIL'])
APARAMSTAIL --> ['comma', 'EXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'EXPR', 'comma'])
comma --> comma
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0,
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'floatlit'])
floatlit --> floatlit
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar'])
rpar --> rpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi'])
semi --> semi
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'EXPR', 'equal'])
equal --> equal
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'intlit'])
intlit --> intlit
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi'])
semi --> semi
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['while', 'lpar', 'RELEXPR', 'rpar', 'STATBLOCK', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'RELEXPR', 'lpar', 'while'])
while --> while
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'RELEXPR', 'lpar'])
lpar --> lpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'RELEXPR'])
RELEXPR --> ['ARITHEXPR', 'RELOP', 'ARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'RELOP'])
RELOP --> ['leq']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR', 'leq'])
leq --> leq
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <=
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'intlit'])
intlit --> intlit
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar'])
rpar --> rpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'STATBLOCK'])
STATBLOCK --> ['lcurbr', 'REPTSTATBLOCK1', 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'lcurbr'])
lcurbr --> lcurbr
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['STATEMENT', 'REPTSTATBLOCK1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'STATEMENT'])
STATEMENT --> ['write', 'lpar', 'EXPR', 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'EXPR', 'lpar', 'write'])
write --> write
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'EXPR', 'lpar'])
lpar --> lpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar'])
rpar --> rpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi'])
semi --> semi
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['STATEMENT', 'REPTSTATBLOCK1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'STATEMENT'])
STATEMENT --> ['write', 'lpar', 'EXPR', 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'EXPR', 'lpar', 'write'])
write --> write
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'EXPR', 'lpar'])
lpar --> lpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['IDNEST', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'IDNEST'])
IDNEST --> ['dot', 'id', 'VARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id', 'dot'])
dot --> dot
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['lpar', 'APARAMS', 'rpar']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'APARAMS', 'lpar'])
lpar --> lpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'APARAMS'])
APARAMS --> ['EXPR', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar'])
rpar --> rpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar'])
rpar --> rpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter))
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi'])
semi --> semi
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['STATEMENT', 'REPTSTATBLOCK1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'STATEMENT'])
STATEMENT --> ['write', 'lpar', 'EXPR', 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'EXPR', 'lpar', 'write'])
write --> write
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'EXPR', 'lpar'])
lpar --> lpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['IDNEST', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'IDNEST'])
IDNEST --> ['dot', 'id', 'VARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id', 'dot'])
dot --> dot
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['lpar', 'APARAMS', 'rpar']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'APARAMS', 'lpar'])
lpar --> lpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'APARAMS'])
APARAMS --> ['EXPR', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', 'id'])
id --> id
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar'])
rpar --> rpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar'])
rpar --> rpar
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter))
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi'])
semi --> semi
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi', 'rcurbr'])
rcurbr --> rcurbr
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  }
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1', 'semi'])
semi --> semi
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr'])
rcurbr --> rcurbr
func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5) ;
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
}
