deque(['$', 'START'])
START --> [<function createLeafEpsilon at 0x0000025104E50DC0>, 'PROG', <function createProgNode at 0x0000025104E52320>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'PROG'])
PROG --> ['REPTPROG0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0'])
REPTPROG0 --> ['STRUCTORIMPLORFUNC', 'REPTPROG0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'STRUCTORIMPLORFUNC'])
STRUCTORIMPLORFUNC --> ['FUNCDEF']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCDEF'])
FUNCDEF --> ['FUNCHEAD', 'FUNCBODY']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x0000025104E50940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x0000025104E50F70>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x0000025104E50C10>, <function createFuncDefNode at 0x0000025104E51000>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'FPARAMS', 'lpar', <function createLeaf at 0x0000025104E50940>, 'id', 'func'])
func --> func
func
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'FPARAMS', 'lpar', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'FPARAMS', 'lpar'])
lpar --> lpar
func printarray(
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x0000025104E50940>, 'colon', 'TYPE', <function createLeafType at 0x0000025104E50C10>, 'REPTFPARAMS3', <function createDimNode at 0x0000025104E50E50>, <function createVardeclNode at 0x0000025104E50EE0>, 'REPTFPARAMS4']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMS3', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMS3', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon'])
colon --> colon
func printarray(arr:
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMS3', <function createLeafType at 0x0000025104E50C10>, 'TYPE'])
TYPE --> ['integer']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMS3', <function createLeafType at 0x0000025104E50C10>, 'integer'])
integer --> integer
func printarray(arr: integer
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['ARRAYSIZE', 'REPTFPARAMS3']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMS3', 'ARRAYSIZE'])
ARRAYSIZE --> ['lsqbr', 'ENDBR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMS3', 'ENDBR', 'lsqbr'])
lsqbr --> lsqbr
func printarray(arr: integer[
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMS3', 'ENDBR'])
ENDBR --> ['rsqbr']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMS3', 'rsqbr'])
rsqbr --> rsqbr
func printarray(arr: integer[]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['FPARAMSTAIL', <function createVardeclNode at 0x0000025104E50EE0>, 'REPTFPARAMS4']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, 'FPARAMSTAIL'])
FPARAMSTAIL --> ['comma', 'id', <function createLeaf at 0x0000025104E50940>, 'colon', 'TYPE', <function createLeafType at 0x0000025104E50C10>, 'REPTFPARAMSTAIL4', <function createDimNode at 0x0000025104E50E50>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon', <function createLeaf at 0x0000025104E50940>, 'id', 'comma'])
comma --> comma
func printarray(arr: integer[],
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon'])
colon --> colon
func printarray(arr: integer[], size:
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE'])
TYPE --> ['integer']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x0000025104E50C10>, 'integer'])
integer --> integer
func printarray(arr: integer[], size: integer
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTFPARAMSTAIL4'])
REPTFPARAMSTAIL4 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x0000025104E50F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar
func printarray(arr: integer[], size: integer)
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE', 'arrow'])
arrow --> arrow
func printarray(arr: integer[], size: integer) ->
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'RETURNTYPE'])
RETURNTYPE --> ['void']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000025104E51000>, <function createLeafType at 0x0000025104E50C10>, 'void'])
void --> void
func printarray(arr: integer[], size: integer) -> void
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'FUNCBODY'])
FUNCBODY --> ['lcurbr', <function createLeafEpsilon at 0x0000025104E50DC0>, 'REPTFUNCBODY1', <function createFuncBodyNode at 0x0000025104E51A20>, 'rcurbr']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', <function createLeafEpsilon at 0x0000025104E50DC0>, 'lcurbr'])
lcurbr --> lcurbr
func printarray(arr: integer[], size: integer) -> void
{
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x0000025104E50940>, 'colon', 'TYPE', <function createLeafType at 0x0000025104E50C10>, 'REPTVARDECL4', <function createDimNode at 0x0000025104E50E50>, <function createVardeclNode at 0x0000025104E50EE0>, 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon', <function createLeaf at 0x0000025104E50940>, 'id', 'let'])
let --> let
func printarray(arr: integer[], size: integer) -> void
{
  let
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon'])
colon --> colon
func printarray(arr: integer[], size: integer) -> void
{
  let n:
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE'])
TYPE --> ['integer']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4', <function createLeafType at 0x0000025104E50C10>, 'integer'])
integer --> integer
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi'])
semi --> semi
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x0000025104E50940>, 'colon', 'TYPE', <function createLeafType at 0x0000025104E50C10>, 'REPTVARDECL4', <function createDimNode at 0x0000025104E50E50>, <function createVardeclNode at 0x0000025104E50EE0>, 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon', <function createLeaf at 0x0000025104E50940>, 'id', 'let'])
let --> let
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE', 'colon'])
colon --> colon
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i:
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4', <function createLeafType at 0x0000025104E50C10>, 'TYPE'])
TYPE --> ['integer']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4', <function createLeafType at 0x0000025104E50C10>, 'integer'])
integer --> integer
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000025104E50EE0>, <function createDimNode at 0x0000025104E50E50>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi'])
semi --> semi
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x0000025104E50940>, <function createAttributeNode at 0x0000025104E52290>, 'STATEVARORFUNC']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', <function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>, <function createAssignNode at 0x0000025104E52170>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'equal'])
equal --> equal
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n =
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi'])
semi --> semi
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x0000025104E50940>, <function createAttributeNode at 0x0000025104E52290>, 'STATEVARORFUNC']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', <function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>, <function createAssignNode at 0x0000025104E52170>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'equal'])
equal --> equal
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i =
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit', <function createLeaf at 0x0000025104E50940>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x0000025104E50940>, 'intlit'])
intlit --> intlit
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi'])
semi --> semi
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['while', 'lpar', 'RELEXPR', <function createWhileNode at 0x0000025104E51630>, 'rpar', <function createLeafEpsilon at 0x0000025104E50DC0>, 'STATBLOCK', <function createWhileBlockNode at 0x0000025104E516C0>, 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, 'RELEXPR', 'lpar', 'while'])
while --> while
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, 'RELEXPR', 'lpar'])
lpar --> lpar
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, 'RELEXPR'])
RELEXPR --> ['ARITHEXPR', 'RELOP', 'ARITHEXPR', <function createConditionNode at 0x0000025104E51240>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'RELOP'])
RELOP --> ['lt']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR', 'lt'])
lt --> lt
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar', <function createWhileNode at 0x0000025104E51630>, <function createConditionNode at 0x0000025104E51240>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK', <function createLeafEpsilon at 0x0000025104E50DC0>, 'rpar'])
rpar --> rpar
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n)
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'STATBLOCK'])
STATBLOCK --> ['lcurbr', 'REPTSTATBLOCK1', 'rcurbr']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'lcurbr'])
lcurbr --> lcurbr
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['STATEMENT', 'REPTSTATBLOCK1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'STATEMENT'])
STATEMENT --> ['write', 'lpar', <function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>, <function createWriteNode at 0x0000025104E51090>, 'rpar', 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'lpar', 'write'])
write --> write
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'lpar'])
lpar --> lpar
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['INDICE', 'REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'INDICE'])
INDICE --> ['lsqbr', 'ARITHEXPR', <function createIndiceNode at 0x0000025104E51EA0>, 'rsqbr']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'ARITHEXPR', 'lsqbr'])
lsqbr --> lsqbr
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0', 'rsqbr'])
rsqbr --> rsqbr
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x0000025104E51090>, <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar'])
rpar --> rpar
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i])
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi'])
semi --> semi
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['STATEMENT', 'REPTSTATBLOCK1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x0000025104E50940>, <function createAttributeNode at 0x0000025104E52290>, 'STATEVARORFUNC']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'STATEVARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', <function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>, <function createAssignNode at 0x0000025104E52170>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'equal'])
equal --> equal
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i =
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['ADDOP', 'TERM', <function createAddNode at 0x0000025104E51F30>, 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x0000025104E51F30>, 'TERM', 'ADDOP'])
ADDOP --> ['plus']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x0000025104E51F30>, 'TERM', 'plus'])
plus --> plus
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x0000025104E51F30>, 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x0000025104E51F30>, 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit', <function createLeaf at 0x0000025104E50940>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x0000025104E51F30>, 'RIGHTRECTERM', <function createLeaf at 0x0000025104E50940>, 'intlit'])
intlit --> intlit
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x0000025104E51F30>, 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x0000025104E51F30>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1', 'semi'])
semi --> semi
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createWhileBlockNode at 0x0000025104E516C0>, 'rcurbr'])
rcurbr --> rcurbr
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  }
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi'])
semi --> semi
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x0000025104E50940>, <function createAttributeNode at 0x0000025104E52290>, 'STATEVARORFUNC']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', <function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>, <function createAssignNode at 0x0000025104E52170>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'equal'])
equal --> equal
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 =
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['IDNEST', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'IDNEST'])
IDNEST --> ['dot', 'id', <function createLeaf at 0x0000025104E50940>, <function createAttributeNode at 0x0000025104E52290>, 'VARORFUNC']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id', 'dot'])
dot --> dot
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['lpar', <function createLeafEpsilon at 0x0000025104E50DC0>, 'APARAMS', <function createFuncParamList at 0x0000025104E51990>, 'rpar']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'APARAMS', <function createLeafEpsilon at 0x0000025104E50DC0>, 'lpar'])
lpar --> lpar
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'APARAMS'])
APARAMS --> [<function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>, 'REPTAPARAMS1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit', <function createLeaf at 0x0000025104E50940>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x0000025104E50940>, 'intlit'])
intlit --> intlit
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['APARAMSTAIL', 'REPTAPARAMS1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', 'APARAMSTAIL'])
APARAMSTAIL --> ['comma', <function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'comma'])
comma --> comma
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2,
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit', <function createLeaf at 0x0000025104E50940>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x0000025104E50940>, 'floatlit'])
floatlit --> floatlit
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar'])
rpar --> rpar
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5)
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi'])
semi --> semi
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x0000025104E50940>, <function createAttributeNode at 0x0000025104E52290>, 'STATEVARORFUNC']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', <function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>, <function createAssignNode at 0x0000025104E52170>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'equal'])
equal --> equal
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 =
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['IDNEST', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'IDNEST'])
IDNEST --> ['dot', 'id', <function createLeaf at 0x0000025104E50940>, <function createAttributeNode at 0x0000025104E52290>, 'VARORFUNC']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id', 'dot'])
dot --> dot
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['lpar', <function createLeafEpsilon at 0x0000025104E50DC0>, 'APARAMS', <function createFuncParamList at 0x0000025104E51990>, 'rpar']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'APARAMS', <function createLeafEpsilon at 0x0000025104E50DC0>, 'lpar'])
lpar --> lpar
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'APARAMS'])
APARAMS --> [<function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>, 'REPTAPARAMS1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['SIGN', <function createLeafSign at 0x0000025104E50D30>, 'FACTOR', <function createSignedNode at 0x0000025104E51E10>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createSignedNode at 0x0000025104E51E10>, 'FACTOR', <function createLeafSign at 0x0000025104E50D30>, 'SIGN'])
SIGN --> ['minus']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createSignedNode at 0x0000025104E51E10>, 'FACTOR', <function createLeafSign at 0x0000025104E50D30>, 'minus'])
minus --> minus
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createSignedNode at 0x0000025104E51E10>, 'FACTOR'])
FACTOR --> ['floatlit', <function createLeaf at 0x0000025104E50940>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createSignedNode at 0x0000025104E51E10>, <function createLeaf at 0x0000025104E50940>, 'floatlit'])
floatlit --> floatlit
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['APARAMSTAIL', 'REPTAPARAMS1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', 'APARAMSTAIL'])
APARAMSTAIL --> ['comma', <function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'comma'])
comma --> comma
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0,
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit', <function createLeaf at 0x0000025104E50940>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x0000025104E50940>, 'floatlit'])
floatlit --> floatlit
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['APARAMSTAIL', 'REPTAPARAMS1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', 'APARAMSTAIL'])
APARAMSTAIL --> ['comma', <function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'comma'])
comma --> comma
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0,
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit', <function createLeaf at 0x0000025104E50940>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x0000025104E50940>, 'floatlit'])
floatlit --> floatlit
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1', <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x0000025104E51990>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar'])
rpar --> rpar
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0)
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi'])
semi --> semi
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x0000025104E50940>, <function createAttributeNode at 0x0000025104E52290>, 'STATEVARORFUNC']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['dot', 'STATESTART']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATESTART', 'dot'])
dot --> dot
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x0000025104E50940>, <function createAttributeNode at 0x0000025104E52290>, 'STATEVARORFUNC']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['dot', 'STATESTART']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATESTART', 'dot'])
dot --> dot
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x0000025104E50940>, <function createAttributeNode at 0x0000025104E52290>, 'STATEVARORFUNC']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createAttributeNode at 0x0000025104E52290>, <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', <function createLeafEpsilon at 0x0000025104E50DC0>, 'EXPR', <function createExprNode at 0x0000025104E52200>, <function createAssignNode at 0x0000025104E52170>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR', <function createLeafEpsilon at 0x0000025104E50DC0>, 'equal'])
equal --> equal
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b =
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x0000025104E52170>, <function createExprNode at 0x0000025104E52200>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi'])
semi --> semi
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['read', 'lpar', 'VARIABLE', <function createReadNode at 0x0000025104E51120>, 'rpar', 'semi']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'VARIABLE', 'lpar', 'read'])
read --> read
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'VARIABLE', 'lpar'])
lpar --> lpar
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read(
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'VARIABLE'])
VARIABLE --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARIABLE2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'VARIABLE2', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read(arr
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'VARIABLE2'])
VARIABLE2 --> ['REPTVARIABLE20', 'REPTVARIABLE']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20'])
REPTVARIABLE20 --> ['INDICE', 'REPTVARIABLE20']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'INDICE'])
INDICE --> ['lsqbr', 'ARITHEXPR', <function createIndiceNode at 0x0000025104E51EA0>, 'rsqbr']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'ARITHEXPR', 'lsqbr'])
lsqbr --> lsqbr
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read(arr[
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit', <function createLeaf at 0x0000025104E50940>]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x0000025104E50940>, 'intlit'])
intlit --> intlit
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read(arr[1
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr'])
rsqbr --> rsqbr
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read(arr[1]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20'])
REPTVARIABLE20 --> ['INDICE', 'REPTVARIABLE20']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'INDICE'])
INDICE --> ['lsqbr', 'ARITHEXPR', <function createIndiceNode at 0x0000025104E51EA0>, 'rsqbr']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'ARITHEXPR', 'lsqbr'])
lsqbr --> lsqbr
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read(arr[1][
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x0000025104E50940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x0000025104E50940>, 'id'])
id --> id
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read(arr[1][n
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr', <function createIndiceNode at 0x0000025104E51EA0>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20', 'rsqbr'])
rsqbr --> rsqbr
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read(arr[1][n]
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'REPTVARIABLE20'])
REPTVARIABLE20 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE', 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'REPTVARIABLE'])
REPTVARIABLE --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReadNode at 0x0000025104E51120>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1', 'semi', 'rpar'])
rpar --> rpar
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read(arr[1][n])
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['epsilon']
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000025104E51A20>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x0000025104E52320>, 'REPTPROG0', 'rcurbr'])
rcurbr --> rcurbr
func printarray(arr: integer[], size: integer) -> void
{
  let n: integer;
  let i: integer;
  n = size;
  i = 0;
  while (i<n) {
    write(arr[i]);
      i = i+1;
  };
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  new_function.a.b = a;
  read(arr[1][n])
}
