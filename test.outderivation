deque(['$', 'START'])
START --> [<function createLeafEpsilon at 0x0000016022717640>, 'PROG', <function createProgNode at 0x000001602272C8B0>]
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'PROG'])
PROG --> ['REPTPROG0']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0'])
REPTPROG0 --> ['STRUCTORIMPLORFUNC', 'REPTPROG0']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'STRUCTORIMPLORFUNC'])
STRUCTORIMPLORFUNC --> ['FUNCDEF']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCDEF'])
FUNCDEF --> ['FUNCHEAD', 'FUNCBODY']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x00000160216FC700>, 'lpar', 'FPARAMS', <function createParamListNode at 0x00000160227177F0>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x0000016022717490>, <function createFuncDefNode at 0x0000016022717880>]
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000016022717880>, <function createLeafType at 0x0000016022717490>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x00000160227177F0>, 'FPARAMS', 'lpar', <function createLeaf at 0x00000160216FC700>, 'id', 'func'])
func --> func

func
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000016022717880>, <function createLeafType at 0x0000016022717490>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x00000160227177F0>, 'FPARAMS', 'lpar', <function createLeaf at 0x00000160216FC700>, 'id'])
id --> id

func main
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000016022717880>, <function createLeafType at 0x0000016022717490>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x00000160227177F0>, 'FPARAMS', 'lpar'])
lpar --> lpar

func main(
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000016022717880>, <function createLeafType at 0x0000016022717490>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x00000160227177F0>, 'FPARAMS'])
FPARAMS --> ['epsilon']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000016022717880>, <function createLeafType at 0x0000016022717490>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x00000160227177F0>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000016022717880>, <function createLeafType at 0x0000016022717490>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

func main()
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000016022717880>, <function createLeafType at 0x0000016022717490>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

func main() ->
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000016022717880>, <function createLeafType at 0x0000016022717490>, 'RETURNTYPE'])
RETURNTYPE --> ['void']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x0000016022717880>, <function createLeafType at 0x0000016022717490>, 'void'])
void --> void

func main() -> void
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'FUNCBODY'])
FUNCBODY --> ['lcurbr', <function createLeafEpsilon at 0x0000016022717640>, 'REPTFUNCBODY1', <function createFuncBodyNode at 0x0000016022717F40>, 'rcurbr']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', <function createLeafEpsilon at 0x0000016022717640>, 'lcurbr'])
lcurbr --> lcurbr

func main() -> void
{
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x00000160216FC700>, 'colon', 'TYPE', <function createLeafType at 0x0000016022717490>, 'REPTVARDECL4', <function createDimNode at 0x00000160227176D0>, <function createVardeclNode at 0x0000016022717760>, 'semi']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4', <function createLeafType at 0x0000016022717490>, 'TYPE', 'colon', <function createLeaf at 0x00000160216FC700>, 'id', 'let'])
let --> let

func main() -> void
{
  let
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4', <function createLeafType at 0x0000016022717490>, 'TYPE', 'colon', <function createLeaf at 0x00000160216FC700>, 'id'])
id --> id

func main() -> void
{
  let a
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4', <function createLeafType at 0x0000016022717490>, 'TYPE', 'colon'])
colon --> colon

func main() -> void
{
  let a:
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4', <function createLeafType at 0x0000016022717490>, 'TYPE'])
TYPE --> ['integer']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4', <function createLeafType at 0x0000016022717490>, 'integer'])
integer --> integer

func main() -> void
{
  let a: integer
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

func main() -> void
{
  let a: integer;
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x00000160216FC700>, 'colon', 'TYPE', <function createLeafType at 0x0000016022717490>, 'REPTVARDECL4', <function createDimNode at 0x00000160227176D0>, <function createVardeclNode at 0x0000016022717760>, 'semi']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4', <function createLeafType at 0x0000016022717490>, 'TYPE', 'colon', <function createLeaf at 0x00000160216FC700>, 'id', 'let'])
let --> let

func main() -> void
{
  let a: integer;
  let
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4', <function createLeafType at 0x0000016022717490>, 'TYPE', 'colon', <function createLeaf at 0x00000160216FC700>, 'id'])
id --> id

func main() -> void
{
  let a: integer;
  let b
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4', <function createLeafType at 0x0000016022717490>, 'TYPE', 'colon'])
colon --> colon

func main() -> void
{
  let a: integer;
  let b:
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4', <function createLeafType at 0x0000016022717490>, 'TYPE'])
TYPE --> ['integer']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4', <function createLeafType at 0x0000016022717490>, 'integer'])
integer --> integer

func main() -> void
{
  let a: integer;
  let b: integer
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x0000016022717760>, <function createDimNode at 0x00000160227176D0>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

func main() -> void
{
  let a: integer;
  let b: integer;
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['epsilon']
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x0000016022717F40>, 'epsilon'])
epsilon --> epsilon
deque(['$', <function createProgNode at 0x000001602272C8B0>, 'REPTPROG0', 'rcurbr'])
rcurbr --> rcurbr

func main() -> void
{
  let a: integer;
  let b: integer;
}
