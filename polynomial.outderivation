deque(['$', 'START'])
START --> ['PROG']
deque(['$', 'PROG'])
PROG --> ['REPTPROG0']
deque(['$', 'REPTPROG0'])
REPTPROG0 --> ['STRUCTORIMPLORFUNC', 'REPTPROG0']
deque(['$', 'REPTPROG0', 'STRUCTORIMPLORFUNC'])
STRUCTORIMPLORFUNC --> ['STRUCTDECL']
deque(['$', 'REPTPROG0', 'STRUCTDECL'])
STRUCTDECL --> ['struct', 'id', <function createLeaf at 0x000001E271C70940>, <function createLeafEpsilon at 0x000001E271C70EE0>, 'OPTSTRUCTDECL2', <function createInheritsNode at 0x000001E271C71630>, <function createStructDefNode at 0x000001E271C716C0>, <function createLeafEpsilon at 0x000001E271C70EE0>, 'lcurbr', 'REPTSTRUCTDECL4', <function createStructBodyNode at 0x000001E271C71750>, 'rcurbr', 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'OPTSTRUCTDECL2', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createLeaf at 0x000001E271C70940>, 'id', 'struct'])
struct --> struct

struct
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'OPTSTRUCTDECL2', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'OPTSTRUCTDECL2'])
OPTSTRUCTDECL2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['VISIBILITY', <function createLeafVisibility at 0x000001E271C70E50>, 'MEMBERDECL', <function createStructDeclNode at 0x000001E271C717E0>, 'REPTSTRUCTDECL4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'VISIBILITY'])
VISIBILITY --> ['public']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'public'])
public --> public

struct polynomial {
    public
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL'])
MEMBERDECL --> ['FUNCDECL']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'FUNCDECL'])
FUNCDECL --> ['FUNCHEAD', 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMS3', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float)
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) ->
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['TYPE']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
}
deque(['$', 'REPTPROG0', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};
deque(['$', 'REPTPROG0'])
REPTPROG0 --> ['STRUCTORIMPLORFUNC', 'REPTPROG0']
deque(['$', 'REPTPROG0', 'STRUCTORIMPLORFUNC'])
STRUCTORIMPLORFUNC --> ['STRUCTDECL']
deque(['$', 'REPTPROG0', 'STRUCTDECL'])
STRUCTDECL --> ['struct', 'id', <function createLeaf at 0x000001E271C70940>, <function createLeafEpsilon at 0x000001E271C70EE0>, 'OPTSTRUCTDECL2', <function createInheritsNode at 0x000001E271C71630>, <function createStructDefNode at 0x000001E271C716C0>, <function createLeafEpsilon at 0x000001E271C70EE0>, 'lcurbr', 'REPTSTRUCTDECL4', <function createStructBodyNode at 0x000001E271C71750>, 'rcurbr', 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'OPTSTRUCTDECL2', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createLeaf at 0x000001E271C70940>, 'id', 'struct'])
struct --> struct

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'OPTSTRUCTDECL2', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'OPTSTRUCTDECL2'])
OPTSTRUCTDECL2 --> ['inherits', 'id', <function createLeaf at 0x000001E271C70940>, 'REPTOPTSTRUCTDECL22']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'REPTOPTSTRUCTDECL22', <function createLeaf at 0x000001E271C70940>, 'id', 'inherits'])
inherits --> inherits

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'REPTOPTSTRUCTDECL22', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'REPTOPTSTRUCTDECL22'])
REPTOPTSTRUCTDECL22 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['VISIBILITY', <function createLeafVisibility at 0x000001E271C70E50>, 'MEMBERDECL', <function createStructDeclNode at 0x000001E271C717E0>, 'REPTSTRUCTDECL4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'VISIBILITY'])
VISIBILITY --> ['private']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'private'])
private --> private

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL'])
MEMBERDECL --> ['VARDECL']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['VISIBILITY', <function createLeafVisibility at 0x000001E271C70E50>, 'MEMBERDECL', <function createStructDeclNode at 0x000001E271C717E0>, 'REPTSTRUCTDECL4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'VISIBILITY'])
VISIBILITY --> ['private']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'private'])
private --> private

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL'])
MEMBERDECL --> ['VARDECL']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['VISIBILITY', <function createLeafVisibility at 0x000001E271C70E50>, 'MEMBERDECL', <function createStructDeclNode at 0x000001E271C717E0>, 'REPTSTRUCTDECL4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'VISIBILITY'])
VISIBILITY --> ['public']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'public'])
public --> public

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL'])
MEMBERDECL --> ['FUNCDECL']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'FUNCDECL'])
FUNCDECL --> ['FUNCHEAD', 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMS3', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['FPARAMSTAIL', <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, 'FPARAMSTAIL'])
FPARAMSTAIL --> ['comma', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMSTAIL4', <function createDimNode at 0x000001E271C70F70>]
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'comma'])
comma --> comma

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float,
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4'])
REPTFPARAMSTAIL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float)
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) ->
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['TYPE']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['id']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['VISIBILITY', <function createLeafVisibility at 0x000001E271C70E50>, 'MEMBERDECL', <function createStructDeclNode at 0x000001E271C717E0>, 'REPTSTRUCTDECL4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'VISIBILITY'])
VISIBILITY --> ['public']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'public'])
public --> public

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL'])
MEMBERDECL --> ['FUNCDECL']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'FUNCDECL'])
FUNCDECL --> ['FUNCHEAD', 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMS3', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float)
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) ->
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['TYPE']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
}
deque(['$', 'REPTPROG0', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};
deque(['$', 'REPTPROG0'])
REPTPROG0 --> ['STRUCTORIMPLORFUNC', 'REPTPROG0']
deque(['$', 'REPTPROG0', 'STRUCTORIMPLORFUNC'])
STRUCTORIMPLORFUNC --> ['STRUCTDECL']
deque(['$', 'REPTPROG0', 'STRUCTDECL'])
STRUCTDECL --> ['struct', 'id', <function createLeaf at 0x000001E271C70940>, <function createLeafEpsilon at 0x000001E271C70EE0>, 'OPTSTRUCTDECL2', <function createInheritsNode at 0x000001E271C71630>, <function createStructDefNode at 0x000001E271C716C0>, <function createLeafEpsilon at 0x000001E271C70EE0>, 'lcurbr', 'REPTSTRUCTDECL4', <function createStructBodyNode at 0x000001E271C71750>, 'rcurbr', 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'OPTSTRUCTDECL2', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createLeaf at 0x000001E271C70940>, 'id', 'struct'])
struct --> struct

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'OPTSTRUCTDECL2', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'OPTSTRUCTDECL2'])
OPTSTRUCTDECL2 --> ['inherits', 'id', <function createLeaf at 0x000001E271C70940>, 'REPTOPTSTRUCTDECL22']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'REPTOPTSTRUCTDECL22', <function createLeaf at 0x000001E271C70940>, 'id', 'inherits'])
inherits --> inherits

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'REPTOPTSTRUCTDECL22', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'REPTOPTSTRUCTDECL22'])
REPTOPTSTRUCTDECL22 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, <function createStructDefNode at 0x000001E271C716C0>, <function createInheritsNode at 0x000001E271C71630>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['VISIBILITY', <function createLeafVisibility at 0x000001E271C70E50>, 'MEMBERDECL', <function createStructDeclNode at 0x000001E271C717E0>, 'REPTSTRUCTDECL4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'VISIBILITY'])
VISIBILITY --> ['private']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'private'])
private --> private

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL'])
MEMBERDECL --> ['VARDECL']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['VISIBILITY', <function createLeafVisibility at 0x000001E271C70E50>, 'MEMBERDECL', <function createStructDeclNode at 0x000001E271C717E0>, 'REPTSTRUCTDECL4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'VISIBILITY'])
VISIBILITY --> ['private']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'private'])
private --> private

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL'])
MEMBERDECL --> ['VARDECL']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['VISIBILITY', <function createLeafVisibility at 0x000001E271C70E50>, 'MEMBERDECL', <function createStructDeclNode at 0x000001E271C717E0>, 'REPTSTRUCTDECL4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'VISIBILITY'])
VISIBILITY --> ['private']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'private'])
private --> private

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL'])
MEMBERDECL --> ['VARDECL']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['VISIBILITY', <function createLeafVisibility at 0x000001E271C70E50>, 'MEMBERDECL', <function createStructDeclNode at 0x000001E271C717E0>, 'REPTSTRUCTDECL4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'VISIBILITY'])
VISIBILITY --> ['public']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'public'])
public --> public

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL'])
MEMBERDECL --> ['FUNCDECL']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'FUNCDECL'])
FUNCDECL --> ['FUNCHEAD', 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMS3', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['FPARAMSTAIL', <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, 'FPARAMSTAIL'])
FPARAMSTAIL --> ['comma', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMSTAIL4', <function createDimNode at 0x000001E271C70F70>]
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'comma'])
comma --> comma

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float,
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4'])
REPTFPARAMSTAIL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['FPARAMSTAIL', <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, 'FPARAMSTAIL'])
FPARAMSTAIL --> ['comma', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMSTAIL4', <function createDimNode at 0x000001E271C70F70>]
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'comma'])
comma --> comma

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float,
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4'])
REPTFPARAMSTAIL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float)
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) ->
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['TYPE']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['id']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['VISIBILITY', <function createLeafVisibility at 0x000001E271C70E50>, 'MEMBERDECL', <function createStructDeclNode at 0x000001E271C717E0>, 'REPTSTRUCTDECL4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'VISIBILITY'])
VISIBILITY --> ['public']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL', <function createLeafVisibility at 0x000001E271C70E50>, 'public'])
public --> public

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'MEMBERDECL'])
MEMBERDECL --> ['FUNCDECL']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'FUNCDECL'])
FUNCDECL --> ['FUNCHEAD', 'semi']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMS3', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x:
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float)
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) ->
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['TYPE']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4', <function createStructDeclNode at 0x000001E271C717E0>, 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'REPTSTRUCTDECL4'])
REPTSTRUCTDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'semi', 'rcurbr', <function createStructBodyNode at 0x000001E271C71750>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'semi', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
}
deque(['$', 'REPTPROG0', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};
deque(['$', 'REPTPROG0'])
REPTPROG0 --> ['STRUCTORIMPLORFUNC', 'REPTPROG0']
deque(['$', 'REPTPROG0', 'STRUCTORIMPLORFUNC'])
STRUCTORIMPLORFUNC --> ['IMPLDEF']
deque(['$', 'REPTPROG0', 'IMPLDEF'])
IMPLDEF --> ['impl', 'id', <function createLeaf at 0x000001E271C70940>, 'lcurbr', 'REPTIMPLDEF3', 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'lcurbr', <function createLeaf at 0x000001E271C70940>, 'id', 'impl'])
impl --> impl

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'lcurbr', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3'])
REPTIMPLDEF3 --> ['FUNCDEF', 'REPTIMPLDEF3']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCDEF'])
FUNCDEF --> ['FUNCHEAD', 'FUNCBODY']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMS3', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) ->
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['TYPE']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY'])
FUNCBODY --> ['lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, 'REPTFUNCBODY1', <function createFuncBodyNode at 0x000001E271C715A0>, 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['return', 'lpar', <function createLeafEpsilon at 0x000001E271C70EE0>, 'EXPR', <function createExprNode at 0x000001E271C71B40>, <function createReturnNode at 0x000001E271C712D0>, 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar', 'return'])
return --> return

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit', <function createLeaf at 0x000001E271C70940>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x000001E271C70940>, 'intlit'])
intlit --> intlit

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3'])
REPTIMPLDEF3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}
deque(['$', 'REPTPROG0'])
REPTPROG0 --> ['STRUCTORIMPLORFUNC', 'REPTPROG0']
deque(['$', 'REPTPROG0', 'STRUCTORIMPLORFUNC'])
STRUCTORIMPLORFUNC --> ['IMPLDEF']
deque(['$', 'REPTPROG0', 'IMPLDEF'])
IMPLDEF --> ['impl', 'id', <function createLeaf at 0x000001E271C70940>, 'lcurbr', 'REPTIMPLDEF3', 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'lcurbr', <function createLeaf at 0x000001E271C70940>, 'id', 'impl'])
impl --> impl

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'lcurbr', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3'])
REPTIMPLDEF3 --> ['FUNCDEF', 'REPTIMPLDEF3']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCDEF'])
FUNCDEF --> ['FUNCHEAD', 'FUNCBODY']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMS3', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) ->
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['TYPE']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY'])
FUNCBODY --> ['lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, 'REPTFUNCBODY1', <function createFuncBodyNode at 0x000001E271C715A0>, 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['MULTOP', 'FACTOR', <function createMultNode at 0x000001E271C71900>, 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'FACTOR', 'MULTOP'])
MULTOP --> ['mult']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'FACTOR', 'mult'])
mult --> mult

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result *
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['ADDOP', 'TERM', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'TERM', 'ADDOP'])
ADDOP --> ['plus']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'TERM', 'plus'])
plus --> plus

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x +
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['MULTOP', 'FACTOR', <function createMultNode at 0x000001E271C71900>, 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'FACTOR', 'MULTOP'])
MULTOP --> ['mult']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'FACTOR', 'mult'])
mult --> mult

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result *
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['ADDOP', 'TERM', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'TERM', 'ADDOP'])
ADDOP --> ['plus']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'TERM', 'plus'])
plus --> plus

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x +
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['return', 'lpar', <function createLeafEpsilon at 0x000001E271C70EE0>, 'EXPR', <function createExprNode at 0x000001E271C71B40>, <function createReturnNode at 0x000001E271C712D0>, 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar', 'return'])
return --> return

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3'])
REPTIMPLDEF3 --> ['FUNCDEF', 'REPTIMPLDEF3']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCDEF'])
FUNCDEF --> ['FUNCHEAD', 'FUNCBODY']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMS3', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['FPARAMSTAIL', <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, 'FPARAMSTAIL'])
FPARAMSTAIL --> ['comma', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMSTAIL4', <function createDimNode at 0x000001E271C70F70>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'comma'])
comma --> comma

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float,
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4'])
REPTFPARAMSTAIL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['FPARAMSTAIL', <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, 'FPARAMSTAIL'])
FPARAMSTAIL --> ['comma', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMSTAIL4', <function createDimNode at 0x000001E271C70F70>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'comma'])
comma --> comma

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float,
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4'])
REPTFPARAMSTAIL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) ->
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['TYPE']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['id']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY'])
FUNCBODY --> ['lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, 'REPTFUNCBODY1', <function createFuncBodyNode at 0x000001E271C715A0>, 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['id']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['dot', 'STATESTART']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART', 'dot'])
dot --> dot

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['dot', 'STATESTART']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART', 'dot'])
dot --> dot

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['dot', 'STATESTART']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART', 'dot'])
dot --> dot

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['return', 'lpar', <function createLeafEpsilon at 0x000001E271C70EE0>, 'EXPR', <function createExprNode at 0x000001E271C71B40>, <function createReturnNode at 0x000001E271C712D0>, 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar', 'return'])
return --> return

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3'])
REPTIMPLDEF3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}
deque(['$', 'REPTPROG0'])
REPTPROG0 --> ['STRUCTORIMPLORFUNC', 'REPTPROG0']
deque(['$', 'REPTPROG0', 'STRUCTORIMPLORFUNC'])
STRUCTORIMPLORFUNC --> ['IMPLDEF']
deque(['$', 'REPTPROG0', 'IMPLDEF'])
IMPLDEF --> ['impl', 'id', <function createLeaf at 0x000001E271C70940>, 'lcurbr', 'REPTIMPLDEF3', 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'lcurbr', <function createLeaf at 0x000001E271C70940>, 'id', 'impl'])
impl --> impl

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'lcurbr', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3'])
REPTIMPLDEF3 --> ['FUNCDEF', 'REPTIMPLDEF3']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCDEF'])
FUNCDEF --> ['FUNCHEAD', 'FUNCBODY']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMS3', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['FPARAMSTAIL', <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, 'FPARAMSTAIL'])
FPARAMSTAIL --> ['comma', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMSTAIL4', <function createDimNode at 0x000001E271C70F70>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'comma'])
comma --> comma

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float,
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMSTAIL4'])
REPTFPARAMSTAIL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) ->
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['TYPE']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['id']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY'])
FUNCBODY --> ['lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, 'REPTFUNCBODY1', <function createFuncBodyNode at 0x000001E271C715A0>, 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['id']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['dot', 'STATESTART']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART', 'dot'])
dot --> dot

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['dot', 'STATESTART']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART', 'dot'])
dot --> dot

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['return', 'lpar', <function createLeafEpsilon at 0x000001E271C70EE0>, 'EXPR', <function createExprNode at 0x000001E271C71B40>, <function createReturnNode at 0x000001E271C712D0>, 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar', 'return'])
return --> return

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3'])
REPTIMPLDEF3 --> ['FUNCDEF', 'REPTIMPLDEF3']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCDEF'])
FUNCDEF --> ['FUNCHEAD', 'FUNCBODY']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTFPARAMS3', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'REPTFPARAMS4']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTFPARAMS3'])
REPTFPARAMS3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'REPTFPARAMS4'])
REPTFPARAMS4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) ->
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['TYPE']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'FUNCBODY'])
FUNCBODY --> ['lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, 'REPTFUNCBODY1', <function createFuncBodyNode at 0x000001E271C715A0>, 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result:
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['float']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'float'])
float --> float

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit', <function createLeaf at 0x000001E271C70940>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x000001E271C70940>, 'floatlit'])
floatlit --> floatlit

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result =
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['MULTOP', 'FACTOR', <function createMultNode at 0x000001E271C71900>, 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'FACTOR', 'MULTOP'])
MULTOP --> ['mult']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'FACTOR', 'mult'])
mult --> mult

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a *
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createMultNode at 0x000001E271C71900>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['ADDOP', 'TERM', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'TERM', 'ADDOP'])
ADDOP --> ['plus']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'TERM', 'plus'])
plus --> plus

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x +
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', <function createAddNode at 0x000001E271C71870>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['return', 'lpar', <function createLeafEpsilon at 0x000001E271C70EE0>, 'EXPR', <function createExprNode at 0x000001E271C71B40>, <function createReturnNode at 0x000001E271C712D0>, 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar', 'return'])
return --> return

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar', <function createReturnNode at 0x000001E271C712D0>, <function createExprNode at 0x000001E271C71B40>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result)
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
deque(['$', 'REPTPROG0', 'rcurbr', 'REPTIMPLDEF3'])
REPTIMPLDEF3 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}
deque(['$', 'REPTPROG0'])
REPTPROG0 --> ['STRUCTORIMPLORFUNC', 'REPTPROG0']
deque(['$', 'REPTPROG0', 'STRUCTORIMPLORFUNC'])
STRUCTORIMPLORFUNC --> ['FUNCDEF']
deque(['$', 'REPTPROG0', 'FUNCDEF'])
FUNCDEF --> ['FUNCHEAD', 'FUNCBODY']
deque(['$', 'REPTPROG0', 'FUNCBODY', 'FUNCHEAD'])
FUNCHEAD --> ['func', 'id', <function createLeaf at 0x000001E271C70940>, 'lpar', 'FPARAMS', <function createParamListNode at 0x000001E271C71090>, 'rpar', 'arrow', 'RETURNTYPE', <function createLeafType at 0x000001E271C70DC0>, <function createFuncDefNode at 0x000001E271C71120>]
deque(['$', 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id', 'func'])
func --> func

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func
deque(['$', 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main
deque(['$', 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main(
deque(['$', 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'FPARAMS'])
FPARAMS --> ['epsilon']
deque(['$', 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar', <function createParamListNode at 0x000001E271C71090>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main()
deque(['$', 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE', 'arrow'])
arrow --> arrow

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() ->
deque(['$', 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'RETURNTYPE'])
RETURNTYPE --> ['void']
deque(['$', 'REPTPROG0', 'FUNCBODY', <function createFuncDefNode at 0x000001E271C71120>, <function createLeafType at 0x000001E271C70DC0>, 'void'])
void --> void

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
deque(['$', 'REPTPROG0', 'FUNCBODY'])
FUNCBODY --> ['lcurbr', <function createLeafEpsilon at 0x000001E271C70EE0>, 'REPTFUNCBODY1', <function createFuncBodyNode at 0x000001E271C715A0>, 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1:
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['id']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2:
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['id']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['VARDECL']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECL'])
VARDECL --> ['let', 'id', <function createLeaf at 0x000001E271C70940>, 'colon', 'TYPE', <function createLeafType at 0x000001E271C70DC0>, 'REPTVARDECL4', <function createDimNode at 0x000001E271C70F70>, <function createVardeclNode at 0x000001E271C71000>, 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id', 'let'])
let --> let

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE', 'colon'])
colon --> colon

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter:
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'TYPE'])
TYPE --> ['integer']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4', <function createLeafType at 0x000001E271C70DC0>, 'integer'])
integer --> integer

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'REPTVARDECL4'])
REPTVARDECL4 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createVardeclNode at 0x000001E271C71000>, <function createDimNode at 0x000001E271C70F70>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 =
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['IDNEST', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'IDNEST'])
IDNEST --> ['dot', 'id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id', 'dot'])
dot --> dot

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['lpar', 'APARAMS', <function createFuncParamList at 0x000001E271C71510>, 'rpar']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'APARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'APARAMS'])
APARAMS --> ['EXPR', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit', <function createLeaf at 0x000001E271C70940>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x000001E271C70940>, 'intlit'])
intlit --> intlit

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['APARAMSTAIL', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'APARAMSTAIL'])
APARAMSTAIL --> ['comma', 'EXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'EXPR', 'comma'])
comma --> comma

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2,
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit', <function createLeaf at 0x000001E271C70940>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x000001E271C70940>, 'floatlit'])
floatlit --> floatlit

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5)
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 =
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['IDNEST', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'IDNEST'])
IDNEST --> ['dot', 'id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id', 'dot'])
dot --> dot

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['lpar', 'APARAMS', <function createFuncParamList at 0x000001E271C71510>, 'rpar']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'APARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'APARAMS'])
APARAMS --> ['EXPR', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['SIGN', 'FACTOR', <function createAddNode at 0x000001E271C71870>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createAddNode at 0x000001E271C71870>, 'FACTOR', 'SIGN'])
SIGN --> ['minus']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createAddNode at 0x000001E271C71870>, 'FACTOR', 'minus'])
minus --> minus

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createAddNode at 0x000001E271C71870>, 'FACTOR'])
FACTOR --> ['floatlit', <function createLeaf at 0x000001E271C70940>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createAddNode at 0x000001E271C71870>, <function createLeaf at 0x000001E271C70940>, 'floatlit'])
floatlit --> floatlit

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['APARAMSTAIL', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'APARAMSTAIL'])
APARAMSTAIL --> ['comma', 'EXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'EXPR', 'comma'])
comma --> comma

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0,
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit', <function createLeaf at 0x000001E271C70940>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x000001E271C70940>, 'floatlit'])
floatlit --> floatlit

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['APARAMSTAIL', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'APARAMSTAIL'])
APARAMSTAIL --> ['comma', 'EXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'EXPR', 'comma'])
comma --> comma

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0,
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['floatlit', <function createLeaf at 0x000001E271C70940>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x000001E271C70940>, 'floatlit'])
floatlit --> floatlit

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0)
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['STATESTART', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATESTART'])
STATESTART --> ['id', <function createLeaf at 0x000001E271C70940>, 'STATEVARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATEVARORFUNC'])
STATEVARORFUNC --> ['REPTSTATEVARORFUNC0', 'REPTSTATEVAR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'REPTSTATEVARORFUNC0'])
REPTSTATEVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'REPTSTATEVAR'])
REPTSTATEVAR --> ['ASSIGNOP', 'EXPR', <function createAssignNode at 0x000001E271C71AB0>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'ASSIGNOP'])
ASSIGNOP --> ['equal']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR', 'equal'])
equal --> equal

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter =
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit', <function createLeaf at 0x000001E271C70940>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x000001E271C70940>, 'intlit'])
intlit --> intlit

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', <function createAssignNode at 0x000001E271C71AB0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['VARDECLORSTAT', 'REPTFUNCBODY1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'VARDECLORSTAT'])
VARDECLORSTAT --> ['STATEMENT']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'STATEMENT'])
STATEMENT --> ['while', 'lpar', 'RELEXPR', <function createWhileNode at 0x000001E271C71360>, 'rpar', 'STATBLOCK', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, 'RELEXPR', 'lpar', 'while'])
while --> while

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, 'RELEXPR', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, 'RELEXPR'])
RELEXPR --> ['ARITHEXPR', 'RELOP', 'ARITHEXPR', <function createConditionNode at 0x000001E271C713F0>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'RELOP'])
RELOP --> ['leq']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR', 'leq'])
leq --> leq

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <=
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['intlit', <function createLeaf at 0x000001E271C70940>]
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', <function createLeaf at 0x000001E271C70940>, 'intlit'])
intlit --> intlit

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar', <function createWhileNode at 0x000001E271C71360>, <function createConditionNode at 0x000001E271C713F0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'STATBLOCK'])
STATBLOCK --> ['lcurbr', 'REPTSTATBLOCK1', 'rcurbr']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'lcurbr'])
lcurbr --> lcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['STATEMENT', 'REPTSTATBLOCK1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'STATEMENT'])
STATEMENT --> ['write', 'lpar', <function createLeafEpsilon at 0x000001E271C70EE0>, 'EXPR', <function createExprNode at 0x000001E271C71B40>, <function createWriteNode at 0x000001E271C711B0>, 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar', 'write'])
write --> write

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter)
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['STATEMENT', 'REPTSTATBLOCK1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'STATEMENT'])
STATEMENT --> ['write', 'lpar', <function createLeafEpsilon at 0x000001E271C70EE0>, 'EXPR', <function createExprNode at 0x000001E271C71B40>, <function createWriteNode at 0x000001E271C711B0>, 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar', 'write'])
write --> write

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['IDNEST', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'IDNEST'])
IDNEST --> ['dot', 'id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id', 'dot'])
dot --> dot

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['lpar', 'APARAMS', <function createFuncParamList at 0x000001E271C71510>, 'rpar']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'APARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'APARAMS'])
APARAMS --> ['EXPR', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter)
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter))
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['STATEMENT', 'REPTSTATBLOCK1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'STATEMENT'])
STATEMENT --> ['write', 'lpar', <function createLeafEpsilon at 0x000001E271C70EE0>, 'EXPR', <function createExprNode at 0x000001E271C71B40>, <function createWriteNode at 0x000001E271C711B0>, 'rpar', 'semi']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar', 'write'])
write --> write

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR', <function createLeafEpsilon at 0x000001E271C70EE0>, 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['IDNEST', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'IDNEST'])
IDNEST --> ['dot', 'id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id', 'dot'])
dot --> dot

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['lpar', 'APARAMS', <function createFuncParamList at 0x000001E271C71510>, 'rpar']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'APARAMS', 'lpar'])
lpar --> lpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'APARAMS'])
APARAMS --> ['EXPR', 'REPTAPARAMS1']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'EXPR'])
EXPR --> ['ARITHEXPR', 'RELEXPREND']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'ARITHEXPR'])
ARITHEXPR --> ['TERM', 'RIGHTRECARITHEXPR']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'TERM'])
TERM --> ['FACTOR', 'RIGHTRECTERM']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'FACTOR'])
FACTOR --> ['id', <function createLeaf at 0x000001E271C70940>, 'VARORFUNC', 'REPTFACTOR2']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC', <function createLeaf at 0x000001E271C70940>, 'id'])
id --> id

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'VARORFUNC'])
VARORFUNC --> ['REPTVARORFUNC0']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'REPTVARORFUNC0'])
REPTVARORFUNC0 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'REPTAPARAMS1'])
REPTAPARAMS1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar', <function createFuncParamList at 0x000001E271C71510>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter)
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'REPTFACTOR2'])
REPTFACTOR2 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'RIGHTRECTERM'])
RIGHTRECTERM --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'RIGHTRECARITHEXPR'])
RIGHTRECARITHEXPR --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'RELEXPREND'])
RELEXPREND --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar', <function createWriteNode at 0x000001E271C711B0>, <function createExprNode at 0x000001E271C71B40>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi', 'rpar'])
rpar --> rpar

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter))
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'REPTSTATBLOCK1'])
REPTSTATBLOCK1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr', 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  }
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1', 'semi'])
semi --> semi

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'REPTFUNCBODY1'])
REPTFUNCBODY1 --> ['epsilon']
deque(['$', 'REPTPROG0', 'rcurbr', <function createFuncBodyNode at 0x000001E271C715A0>, 'epsilon'])
epsilon --> epsilon
deque(['$', 'REPTPROG0', 'rcurbr'])
rcurbr --> rcurbr

struct polynomial {
    public func evaluate(x: float) -> float;
};

struct linear inherits polynomial {
    private let a: float;
    private let b: float;
    public  func build(a: float, b: float) -> linear;
    public  func evaluate(x: float) -> float;
};

struct quadratic inherits polynomial {
    private let a: float;
    private let b: float;
    private let c: float;
    public  func build(a: float, b: float, c: float) -> quadratic;
    public  func evaluate(x: float) -> float;
};


impl polynomial {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl quadratic {
  func evaluate(x: float) -> float
  {
    let result: float;

    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, b: float, c: float) -> quadratic
  {
    let new_function: quadratic ;
    new_function.a = a;
    new_function.b = b;
    new_function.c = c;
    return (new_function);
  }
}

impl linear {
  func build(a: float, b: float) -> linear
  {
    let new_function: linear;
    new_function.a = a;
    new_function.b = b;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


func main() -> void
{
  let f1: linear;
  let f2: quadratic;
  let counter: integer;
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
}
